name: Deploy Notes Backend

on:
  pull_request:
    types:
      - closed
    branches:
      - master

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Git config for creating PR
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DEPLOY_SERVER_IP }} > ~/.ssh/known_hosts

      - name: Build JAR
        run: |
          ./gradlew bootJar

      - name: Get JAR Version from build.gradle.kts
        id: get_version
        run: |
          VERSION=$(grep -oP 'version\s*=\s*"\K[^"]+' build.gradle.kts)
          echo "JAR_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if JAR exists on server
        id: check_jar
        run: |
          JAR_NAME="spring_boot_crash_course-${{ env.JAR_VERSION }}.jar"
          REMOTE_SERVER="admin@${{ secrets.DEPLOY_SERVER_IP }}"
          REMOTE_JAR_DIR="/opt/notes"

          # Check if file exists
          if ssh $REMOTE_SERVER "[ -f $REMOTE_JAR_DIR/$JAR_NAME ]"; then
            echo "JAR_ALREADY_EXISTS=true" >> $GITHUB_ENV
          else
            echo "JAR_ALREADY_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Bump version and create PR if JAR exists
        if: env.JAR_ALREADY_EXISTS == 'true'
        run: |
          # Extract major, minor, patch
          VERSION=$(grep -oP 'version\s*=\s*"\K[^"]+' build.gradle.kts)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          # Increment patch
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"

          # Replace version in build.gradle.kts
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" build.gradle.kts

          # Create a new branch
          BRANCH_NAME="bump-version-to-$NEW_VERSION"
          git checkout -b $BRANCH_NAME
          git add build.gradle.kts
          git commit -m "Bump version to $NEW_VERSION"
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        if: env.JAR_ALREADY_EXISTS == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          branch: ${{ github.head_ref }}
          title: "Bump version to new patch because JAR already exists"
          body: "Automatically bumped version because JAR with this version already exists on the server."
          base: master

      - name: Deploy JAR to Server
        if: env.JAR_ALREADY_EXISTS == 'false'
        run: |
          JAR_NAME="spring_boot_crash_course-${{ env.JAR_VERSION }}.jar"
          LOCAL_JAR_PATH="build/libs/$JAR_NAME"
          REMOTE_SERVER="admin@${{ secrets.DEPLOY_SERVER_IP }}"
          REMOTE_JAR_DIR="/opt/notes"
          TIMESTAMP=$(date +%Y%m%d%H%M%S) # Create timestamp
          BACKUP_JAR_NAME="notes_$TIMESTAMP.jar" # Backup name with timestamp

          # Copy new JAR to the server
          rsync -avz -e "ssh" $LOCAL_JAR_PATH $REMOTE_SERVER:$REMOTE_JAR_DIR/$JAR_NAME

          ssh $REMOTE_SERVER << EOF
            # Backup the current JAR with a timestamp
            mv $REMOTE_JAR_DIR/notes.jar $REMOTE_JAR_DIR/$BACKUP_JAR_NAME

            # Move the new JAR to the correct location
            mv $REMOTE_JAR_DIR/$JAR_NAME $REMOTE_JAR_DIR/notes.jar

            # Restart the service
            sudo systemctl restart notes.service
          EOF
